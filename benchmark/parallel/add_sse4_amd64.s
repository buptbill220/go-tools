//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

DATA LCDATA1<>+0x000(SB)/8, $0x0000000000000001
DATA LCDATA1<>+0x008(SB)/8, $0x0000000000000001
GLOBL LCDATA1<>(SB), 8, $16

TEXT ·_asm_add_sse4_2(SB), $0-16

	MOVQ addr+0(FP), DI
	MOVQ len+8(FP), SI
	LEAQ LCDATA1<>(SB), BP

	WORD $0xf685                           // test    esi, esi
	JLE  LBB0_12
	WORD $0x6348; BYTE $0xc6               // movsxd    rax, esi
	LONG $0xc7048d48                       // lea    rax, [rdi + 8*rax]
	LONG $0x08578d48                       // lea    rdx, [rdi + 8]
	WORD $0x3948; BYTE $0xd0               // cmp    rax, rdx
	LONG $0xd0470f48                       // cmova    rdx, rax
	WORD $0x8948; BYTE $0xf9               // mov    rcx, rdi
	WORD $0xf748; BYTE $0xd1               // not    rcx
	WORD $0x0148; BYTE $0xd1               // add    rcx, rdx
	LONG $0x03e9c148                       // shr    rcx, 3
	WORD $0xff48; BYTE $0xc1               // inc    rcx
	LONG $0x04f98348                       // cmp    rcx, 4
	JB   LBB0_11
	QUAD $0xfffffffffffcb849; WORD $0x3fff // mov    r8, 4611686018427387900
	WORD $0x2149; BYTE $0xc8               // and    r8, rcx
	JE   LBB0_11
	LONG $0xfc708d49                       // lea    rsi, [r8 - 4]
	WORD $0x8948; BYTE $0xf2               // mov    rdx, rsi
	LONG $0x02eac148                       // shr    rdx, 2
	LONG $0xe6ba0f48; BYTE $0x02           // bt    rsi, 2
	JB   LBB0_4
	LONG $0x076f0ff3                       // movdqu    xmm0, oword [rdi]
	LONG $0x4f6f0ff3; BYTE $0x10           // movdqu    xmm1, oword [rdi + 16]
	LONG $0x556f0f66; BYTE $0x00           // movdqa    xmm2, oword 0[rbp] /* [rip + .LCPI0_0] */
	LONG $0xc2d40f66                       // paddq    xmm0, xmm2
	LONG $0xcad40f66                       // paddq    xmm1, xmm2
	LONG $0x077f0ff3                       // movdqu    oword [rdi], xmm0
	LONG $0x4f7f0ff3; BYTE $0x10           // movdqu    oword [rdi + 16], xmm1
	LONG $0x0004b941; WORD $0x0000         // mov    r9d, 4
	JMP  LBB0_6

LBB0_4:
	WORD $0x3145; BYTE $0xc9 // xor    r9d, r9d

LBB0_6:
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB0_9
	WORD $0x894c; BYTE $0xc6     // mov    rsi, r8
	WORD $0x294c; BYTE $0xce     // sub    rsi, r9
	LONG $0xcf548d4a; BYTE $0x30 // lea    rdx, [rdi + 8*r9 + 48]
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI0_0] */

LBB0_8:
	LONG $0x4a6f0ff3; BYTE $0xd0 // movdqu    xmm1, oword [rdx - 48]
	LONG $0x526f0ff3; BYTE $0xe0 // movdqu    xmm2, oword [rdx - 32]
	LONG $0xc8d40f66             // paddq    xmm1, xmm0
	LONG $0xd0d40f66             // paddq    xmm2, xmm0
	LONG $0x4a7f0ff3; BYTE $0xd0 // movdqu    oword [rdx - 48], xmm1
	LONG $0x527f0ff3; BYTE $0xe0 // movdqu    oword [rdx - 32], xmm2
	LONG $0x4a6f0ff3; BYTE $0xf0 // movdqu    xmm1, oword [rdx - 16]
	LONG $0x126f0ff3             // movdqu    xmm2, oword [rdx]
	LONG $0xc8d40f66             // paddq    xmm1, xmm0
	LONG $0xd0d40f66             // paddq    xmm2, xmm0
	LONG $0x4a7f0ff3; BYTE $0xf0 // movdqu    oword [rdx - 16], xmm1
	LONG $0x127f0ff3             // movdqu    oword [rdx], xmm2
	LONG $0x40c28348             // add    rdx, 64
	LONG $0xf8c68348             // add    rsi, -8
	JNE  LBB0_8

LBB0_9:
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JE   LBB0_12
	LONG $0xc73c8d4a         // lea    rdi, [rdi + 8*r8]

LBB0_11:
	WORD $0xff48; BYTE $0x07 // inc    qword [rdi]
	LONG $0x08c78348         // add    rdi, 8
	WORD $0x3948; BYTE $0xc7 // cmp    rdi, rax
	JB   LBB0_11

LBB0_12:
	RET

DATA LCDATA2<>+0x000(SB)/8, $0x0000000000000001
DATA LCDATA2<>+0x008(SB)/8, $0x0000000000000001
GLOBL LCDATA2<>(SB), 8, $16

TEXT ·_asm_add2_sse4_2(SB), $0-16

	MOVQ addr+0(FP), DI
	MOVQ len+8(FP), SI
	LEAQ LCDATA2<>(SB), BP

	WORD $0xf685                 // test    esi, esi
	JLE  LBB1_7
	WORD $0x6348; BYTE $0xc6     // movsxd    rax, esi
	LONG $0xc7048d48             // lea    rax, [rdi + 8*rax]
	LONG $0x10578d48             // lea    rdx, [rdi + 16]
	WORD $0x3948; BYTE $0xd0     // cmp    rax, rdx
	LONG $0xd0470f48             // cmova    rdx, rax
	WORD $0x8948; BYTE $0xf9     // mov    rcx, rdi
	WORD $0xf748; BYTE $0xd1     // not    rcx
	WORD $0x0148; BYTE $0xd1     // add    rcx, rdx
	WORD $0xca89                 // mov    edx, ecx
	WORD $0xeac1; BYTE $0x04     // shr    edx, 4
	WORD $0xc2ff                 // inc    edx
	LONG $0x07e28348             // and    rdx, 7
	JE   LBB1_4
	WORD $0xf748; BYTE $0xda     // neg    rdx
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI1_0] */

LBB1_3:
	LONG $0x0f6f0ff3         // movdqu    xmm1, oword [rdi]
	LONG $0xc8d40f66         // paddq    xmm1, xmm0
	LONG $0x0f7f0ff3         // movdqu    oword [rdi], xmm1
	LONG $0x107f8d48         // lea    rdi, [rdi + 16]
	WORD $0xff48; BYTE $0xc2 // inc    rdx
	JNE  LBB1_3

LBB1_4:
	LONG $0x70f98348             // cmp    rcx, 112
	JB   LBB1_7
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI1_0] */

LBB1_6:
	LONG $0x0f6f0ff3             // movdqu    xmm1, oword [rdi]
	LONG $0xc8d40f66             // paddq    xmm1, xmm0
	LONG $0x0f7f0ff3             // movdqu    oword [rdi], xmm1
	LONG $0x4f6f0ff3; BYTE $0x10 // movdqu    xmm1, oword [rdi + 16]
	LONG $0xc8d40f66             // paddq    xmm1, xmm0
	LONG $0x4f7f0ff3; BYTE $0x10 // movdqu    oword [rdi + 16], xmm1
	LONG $0x4f6f0ff3; BYTE $0x20 // movdqu    xmm1, oword [rdi + 32]
	LONG $0xc8d40f66             // paddq    xmm1, xmm0
	LONG $0x4f7f0ff3; BYTE $0x20 // movdqu    oword [rdi + 32], xmm1
	LONG $0x4f6f0ff3; BYTE $0x30 // movdqu    xmm1, oword [rdi + 48]
	LONG $0xc8d40f66             // paddq    xmm1, xmm0
	LONG $0x4f7f0ff3; BYTE $0x30 // movdqu    oword [rdi + 48], xmm1
	LONG $0x4f6f0ff3; BYTE $0x40 // movdqu    xmm1, oword [rdi + 64]
	LONG $0xc8d40f66             // paddq    xmm1, xmm0
	LONG $0x4f7f0ff3; BYTE $0x40 // movdqu    oword [rdi + 64], xmm1
	LONG $0x4f6f0ff3; BYTE $0x50 // movdqu    xmm1, oword [rdi + 80]
	LONG $0xc8d40f66             // paddq    xmm1, xmm0
	LONG $0x4f7f0ff3; BYTE $0x50 // movdqu    oword [rdi + 80], xmm1
	LONG $0x4f6f0ff3; BYTE $0x60 // movdqu    xmm1, oword [rdi + 96]
	LONG $0xc8d40f66             // paddq    xmm1, xmm0
	LONG $0x4f7f0ff3; BYTE $0x60 // movdqu    oword [rdi + 96], xmm1
	LONG $0x4f6f0ff3; BYTE $0x70 // movdqu    xmm1, oword [rdi + 112]
	LONG $0xc8d40f66             // paddq    xmm1, xmm0
	LONG $0x4f7f0ff3; BYTE $0x70 // movdqu    oword [rdi + 112], xmm1
	LONG $0x80ef8348             // sub    rdi, -128
	WORD $0x3948; BYTE $0xc7     // cmp    rdi, rax
	JB   LBB1_6

LBB1_7:
	RET

DATA LCDATA3<>+0x000(SB)/8, $0x0000000000000001
DATA LCDATA3<>+0x008(SB)/8, $0x0000000000000001
GLOBL LCDATA3<>(SB), 8, $16

TEXT ·_asm_add4_sse4_2(SB), $0-16

	MOVQ addr+0(FP), DI
	MOVQ len+8(FP), SI
	LEAQ LCDATA3<>(SB), BP

	WORD $0xf685                 // test    esi, esi
	JLE  LBB2_8
	WORD $0x6348; BYTE $0xc6     // movsxd    rax, esi
	LONG $0xc7048d48             // lea    rax, [rdi + 8*rax]
	LONG $0x204f8d48             // lea    rcx, [rdi + 32]
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	LONG $0xc8470f48             // cmova    rcx, rax
	WORD $0x8948; BYTE $0xfa     // mov    rdx, rdi
	WORD $0xf748; BYTE $0xd2     // not    rdx
	WORD $0x0148; BYTE $0xca     // add    rdx, rcx
	WORD $0xd689                 // mov    esi, edx
	WORD $0xeec1; BYTE $0x05     // shr    esi, 5
	WORD $0xc6ff                 // inc    esi
	LONG $0x03e68348             // and    rsi, 3
	JE   LBB2_2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI2_0] */

LBB2_4:
	LONG $0x0f6f0ff3             // movdqu    xmm1, oword [rdi]
	LONG $0xc8d40f66             // paddq    xmm1, xmm0
	LONG $0x0f7f0ff3             // movdqu    oword [rdi], xmm1
	LONG $0x204f8d48             // lea    rcx, [rdi + 32]
	LONG $0x4f6f0ff3; BYTE $0x10 // movdqu    xmm1, oword [rdi + 16]
	LONG $0xc8d40f66             // paddq    xmm1, xmm0
	LONG $0x4f7f0ff3; BYTE $0x10 // movdqu    oword [rdi + 16], xmm1
	WORD $0xff48; BYTE $0xc6     // inc    rsi
	WORD $0x8948; BYTE $0xcf     // mov    rdi, rcx
	JNE  LBB2_4
	JMP  LBB2_5

LBB2_2:
	WORD $0x8948; BYTE $0xf9 // mov    rcx, rdi

LBB2_5:
	LONG $0x60fa8348             // cmp    rdx, 96
	JB   LBB2_8
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI2_0] */

LBB2_7:
	LONG $0x096f0ff3             // movdqu    xmm1, oword [rcx]
	LONG $0xc8d40f66             // paddq    xmm1, xmm0
	LONG $0x097f0ff3             // movdqu    oword [rcx], xmm1
	LONG $0x496f0ff3; BYTE $0x10 // movdqu    xmm1, oword [rcx + 16]
	LONG $0xc8d40f66             // paddq    xmm1, xmm0
	LONG $0x497f0ff3; BYTE $0x10 // movdqu    oword [rcx + 16], xmm1
	LONG $0x496f0ff3; BYTE $0x20 // movdqu    xmm1, oword [rcx + 32]
	LONG $0xc8d40f66             // paddq    xmm1, xmm0
	LONG $0x497f0ff3; BYTE $0x20 // movdqu    oword [rcx + 32], xmm1
	LONG $0x496f0ff3; BYTE $0x30 // movdqu    xmm1, oword [rcx + 48]
	LONG $0xc8d40f66             // paddq    xmm1, xmm0
	LONG $0x497f0ff3; BYTE $0x30 // movdqu    oword [rcx + 48], xmm1
	LONG $0x496f0ff3; BYTE $0x40 // movdqu    xmm1, oword [rcx + 64]
	LONG $0xc8d40f66             // paddq    xmm1, xmm0
	LONG $0x497f0ff3; BYTE $0x40 // movdqu    oword [rcx + 64], xmm1
	LONG $0x496f0ff3; BYTE $0x50 // movdqu    xmm1, oword [rcx + 80]
	LONG $0xc8d40f66             // paddq    xmm1, xmm0
	LONG $0x497f0ff3; BYTE $0x50 // movdqu    oword [rcx + 80], xmm1
	LONG $0x496f0ff3; BYTE $0x60 // movdqu    xmm1, oword [rcx + 96]
	LONG $0xc8d40f66             // paddq    xmm1, xmm0
	LONG $0x497f0ff3; BYTE $0x60 // movdqu    oword [rcx + 96], xmm1
	LONG $0x496f0ff3; BYTE $0x70 // movdqu    xmm1, oword [rcx + 112]
	LONG $0xc8d40f66             // paddq    xmm1, xmm0
	LONG $0x497f0ff3; BYTE $0x70 // movdqu    oword [rcx + 112], xmm1
	LONG $0x80e98348             // sub    rcx, -128
	WORD $0x3948; BYTE $0xc1     // cmp    rcx, rax
	JB   LBB2_7

LBB2_8:
	RET

DATA LCDATA4<>+0x000(SB)/8, $0x0000000000000001
DATA LCDATA4<>+0x008(SB)/8, $0x0000000000000001
GLOBL LCDATA4<>(SB), 8, $16

TEXT ·_asm_add8_sse4_2(SB), $0-16

	MOVQ addr+0(FP), DI
	MOVQ len+8(FP), SI
	LEAQ LCDATA4<>(SB), BP

	WORD $0xf685                 // test    esi, esi
	JLE  LBB3_7
	WORD $0x6348; BYTE $0xc6     // movsxd    rax, esi
	LONG $0xc7048d48             // lea    rax, [rdi + 8*rax]
	LONG $0x404f8d48             // lea    rcx, [rdi + 64]
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	WORD $0x8948; BYTE $0xca     // mov    rdx, rcx
	LONG $0xd0470f48             // cmova    rdx, rax
	WORD $0x8948; BYTE $0xfe     // mov    rsi, rdi
	WORD $0xf748; BYTE $0xd6     // not    rsi
	WORD $0x0148; BYTE $0xd6     // add    rsi, rdx
	WORD $0x8948; BYTE $0xf2     // mov    rdx, rsi
	LONG $0x06eac148             // shr    rdx, 6
	LONG $0xe6ba0f48; BYTE $0x06 // bt    rsi, 6
	JB   LBB3_2
	LONG $0x076f0ff3             // movdqu    xmm0, oword [rdi]
	LONG $0x4d6f0f66; BYTE $0x00 // movdqa    xmm1, oword 0[rbp] /* [rip + .LCPI3_0] */
	LONG $0xc1d40f66             // paddq    xmm0, xmm1
	LONG $0x077f0ff3             // movdqu    oword [rdi], xmm0
	LONG $0x476f0ff3; BYTE $0x10 // movdqu    xmm0, oword [rdi + 16]
	LONG $0xc1d40f66             // paddq    xmm0, xmm1
	LONG $0x477f0ff3; BYTE $0x10 // movdqu    oword [rdi + 16], xmm0
	LONG $0x476f0ff3; BYTE $0x20 // movdqu    xmm0, oword [rdi + 32]
	LONG $0xc1d40f66             // paddq    xmm0, xmm1
	LONG $0x477f0ff3; BYTE $0x20 // movdqu    oword [rdi + 32], xmm0
	LONG $0x476f0ff3; BYTE $0x30 // movdqu    xmm0, oword [rdi + 48]
	LONG $0xc1d40f66             // paddq    xmm0, xmm1
	LONG $0x477f0ff3; BYTE $0x30 // movdqu    oword [rdi + 48], xmm0
	JMP  LBB3_4

LBB3_2:
	WORD $0x8948; BYTE $0xf9 // mov    rcx, rdi

LBB3_4:
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB3_7
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI3_0] */

LBB3_6:
	LONG $0x096f0ff3             // movdqu    xmm1, oword [rcx]
	LONG $0xc8d40f66             // paddq    xmm1, xmm0
	LONG $0x097f0ff3             // movdqu    oword [rcx], xmm1
	LONG $0x496f0ff3; BYTE $0x10 // movdqu    xmm1, oword [rcx + 16]
	LONG $0xc8d40f66             // paddq    xmm1, xmm0
	LONG $0x497f0ff3; BYTE $0x10 // movdqu    oword [rcx + 16], xmm1
	LONG $0x496f0ff3; BYTE $0x20 // movdqu    xmm1, oword [rcx + 32]
	LONG $0xc8d40f66             // paddq    xmm1, xmm0
	LONG $0x497f0ff3; BYTE $0x20 // movdqu    oword [rcx + 32], xmm1
	LONG $0x496f0ff3; BYTE $0x30 // movdqu    xmm1, oword [rcx + 48]
	LONG $0xc8d40f66             // paddq    xmm1, xmm0
	LONG $0x497f0ff3; BYTE $0x30 // movdqu    oword [rcx + 48], xmm1
	LONG $0x496f0ff3; BYTE $0x40 // movdqu    xmm1, oword [rcx + 64]
	LONG $0xc8d40f66             // paddq    xmm1, xmm0
	LONG $0x497f0ff3; BYTE $0x40 // movdqu    oword [rcx + 64], xmm1
	LONG $0x496f0ff3; BYTE $0x50 // movdqu    xmm1, oword [rcx + 80]
	LONG $0xc8d40f66             // paddq    xmm1, xmm0
	LONG $0x497f0ff3; BYTE $0x50 // movdqu    oword [rcx + 80], xmm1
	LONG $0x496f0ff3; BYTE $0x60 // movdqu    xmm1, oword [rcx + 96]
	LONG $0xc8d40f66             // paddq    xmm1, xmm0
	LONG $0x497f0ff3; BYTE $0x60 // movdqu    oword [rcx + 96], xmm1
	LONG $0x496f0ff3; BYTE $0x70 // movdqu    xmm1, oword [rcx + 112]
	LONG $0xc8d40f66             // paddq    xmm1, xmm0
	LONG $0x497f0ff3; BYTE $0x70 // movdqu    oword [rcx + 112], xmm1
	LONG $0x80e98348             // sub    rcx, -128
	WORD $0x3948; BYTE $0xc1     // cmp    rcx, rax
	JB   LBB3_6

LBB3_7:
	RET
